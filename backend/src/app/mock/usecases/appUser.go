// Code generated by MockGen. DO NOT EDIT.
// Source: appUser.go

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	domain "brewing_support/app/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockappUserRepo is a mock of appUserRepo interface.
type MockappUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockappUserRepoMockRecorder
}

// MockappUserRepoMockRecorder is the mock recorder for MockappUserRepo.
type MockappUserRepoMockRecorder struct {
	mock *MockappUserRepo
}

// NewMockappUserRepo creates a new mock instance.
func NewMockappUserRepo(ctrl *gomock.Controller) *MockappUserRepo {
	mock := &MockappUserRepo{ctrl: ctrl}
	mock.recorder = &MockappUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockappUserRepo) EXPECT() *MockappUserRepoMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockappUserRepo) Insert(appUser domain.AppUser, opeUserID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", appUser, opeUserID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockappUserRepoMockRecorder) Insert(appUser, opeUserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockappUserRepo)(nil).Insert), appUser, opeUserID)
}

// Select mocks base method.
func (m *MockappUserRepo) Select() ([]*domain.AppUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select")
	ret0, _ := ret[0].([]*domain.AppUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Select indicates an expected call of Select.
func (mr *MockappUserRepoMockRecorder) Select() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockappUserRepo)(nil).Select))
}

// SelectByID mocks base method.
func (m *MockappUserRepo) SelectByID(id string) (*domain.AppUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByID", id)
	ret0, _ := ret[0].(*domain.AppUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByID indicates an expected call of SelectByID.
func (mr *MockappUserRepoMockRecorder) SelectByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByID", reflect.TypeOf((*MockappUserRepo)(nil).SelectByID), id)
}

// Update mocks base method.
func (m *MockappUserRepo) Update(appUser domain.AppUser, opeUserID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", appUser, opeUserID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockappUserRepoMockRecorder) Update(appUser, opeUserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockappUserRepo)(nil).Update), appUser, opeUserID)
}
